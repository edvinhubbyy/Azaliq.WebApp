@model Azaliq.ViewModels.CartItems.CartIndexViewModel
@{
    ViewData["Title"] = "Shopping Cart";
    decimal BgnToEurRate = 0.51129m;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="py-5">
    <div class="container">
        <h1 class="text-center mb-4">@ViewData["Title"]</h1>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">@Html.ValidationSummary(excludePropertyErrors: true)</div>
        }

        @if (!Model.Items.Any())
        {
            <div class="alert alert-info text-center py-5 fs-5 shadow-sm rounded">
                <i class="fas fa-shopping-cart fa-2x mb-3"></i><br />
                Your cart is empty.
            </div>
        }
        else
        {
            <form asp-action="UpdateAndCheckout" asp-controller="Cart" method="post" id="cartForm">
                <div class="table-responsive shadow-sm rounded mb-4">
                    <table class="table table-bordered align-middle text-center">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th>Image</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Subtotal</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                        @for (int i = 0; i < Model.Items.Count; i++)
                        {
                            var item = Model.Items[i];
                            var priceBgn = item.Price;
                            var subtotalBgn = item.Subtotal;
                            var priceEur = priceBgn * BgnToEurRate;
                            var subtotalEur = subtotalBgn * BgnToEurRate;

                            <tr>
                                <td>@item.ProductName</td>
                                <td>
                                    <img src="@item.ProductImageUrl" alt="@item.ProductName" class="img-fluid rounded shadow-sm" style="width: 70px;" />
                                </td>
                                <td style="text-align: center;">
                                    <input type="hidden" name="Items[@i].ProductId" value="@item.ProductId" />

                                    <input type="number"
                                           name="Items[@i].Quantity"
                                           value="@item.Quantity"
                                           min="1" max="500"
                                           class="form-control text-center quantity-input"
                                           data-index="@i"
                                           aria-label="Quantity for @item.ProductName"
                                           data-bs-toggle="tooltip"
                                           data-bs-placement="top"
                                           title="Quantity must be between 1 and 500."
                                           style="max-width: 70px; margin: 0 auto; display: block;" />
                                </td>
                                <td>
                                    <div>@priceBgn.ToString("C", new System.Globalization.CultureInfo("bg-BG"))</div>
                                    <div class="text-muted small">€@priceEur.ToString("F2")</div>
                                </td>
                                <td id="subtotal-@i" style="width: 120px; min-width: 120px; text-align: right;">
                                    <div>@subtotalBgn.ToString("C", new System.Globalization.CultureInfo("bg-BG"))</div>
                                    <div class="text-muted small">€@subtotalEur.ToString("F2")</div>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteProduct(@item.ProductId)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                        </tbody>
                        <tfoot>
                            @{
                                var totalBgn = Model.Total;
                                var totalEur = totalBgn * BgnToEurRate;
                            }
                            <tr class="fw-bold">
                                <td colspan="3"></td>
                                <td>Total:</td>
                                <td id="totalAmount">
                                    <div>@totalBgn.ToString("C", new System.Globalization.CultureInfo("bg-BG"))</div>
                                    <div class="text-muted small">€@totalEur.ToString("F2")</div>
                                </td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary fw-semibold" id="checkoutButton">
                        <i class="fas fa-check me-1"></i> Checkout
                    </button>

                    <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#confirmClearCartModal">
                        <i class="fas fa-trash me-1"></i> Clear Cart
                    </button>
                </div>
            </form>

            <form id="deleteForm" asp-action="Delete" asp-controller="Cart" method="post" class="d-none">
                <input type="hidden" name="productId" id="deleteProductId" />
            </form>

            <!-- Clear Cart Modal -->
            <div class="modal fade" id="confirmClearCartModal" tabindex="-1" aria-labelledby="clearCartLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content border-0 shadow-sm">
                        <div class="modal-header bg-light">
                            <h5 class="modal-title" id="clearCartLabel">Confirm Clear Cart</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to clear your cart? This action cannot be undone.
                        </div>
                        <div class="modal-footer bg-light">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <form asp-action="ClearCart" asp-controller="Cart" method="post" class="d-inline">
                                <button type="submit" class="btn btn-danger fw-semibold">Clear Cart</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

@section Scripts {
    <script>
        const bgnToEurRate = 0.51129;

        function formatCurrencyBGN(value) {
            return new Intl.NumberFormat('bg-BG', { style: 'currency', currency: 'BGN' }).format(value);
        }

        function formatCurrencyEUR(value) {
            return '€' + value.toFixed(2);
        }

        function validateAndUpdate() {
            const inputs = document.querySelectorAll('.quantity-input');
            let total = 0;
            let formValid = true;

            inputs.forEach(input => {
                const index = input.dataset.index;
                const errorDiv = document.getElementById('error-' + index);
                const row = input.closest('tr');
                const priceBgnText = row.querySelector('td:nth-child(4) div:first-child').textContent;
                const priceBgn = parseFloat(priceBgnText.replace(/[^\d.,-]/g, '').replace(',', '.'));
                let quantity = parseInt(input.value);

                // Tooltip handling
                if (isNaN(quantity) || quantity < 1 || quantity > 500) {
                    formValid = false;
                    input.setAttribute('data-bs-title', 'Quantity must be between 1 and 500');
                    input.setAttribute('data-bs-toggle', 'tooltip');
                    input.setAttribute('data-bs-placement', 'top');
                    const tooltip = bootstrap.Tooltip.getInstance(input) || new bootstrap.Tooltip(input);
                    tooltip.show();
                } else {
                    const tooltip = bootstrap.Tooltip.getInstance(input);
                    if (tooltip) tooltip.dispose();
                }

                const subtotalBgn = (quantity >= 1 && quantity <= 500) ? quantity * priceBgn : 0;
                const subtotalTd = document.getElementById('subtotal-' + index);
                subtotalTd.innerHTML = `
                    <div>${formatCurrencyBGN(subtotalBgn)}</div>
                    <div class="text-muted small">${formatCurrencyEUR(subtotalBgn * bgnToEurRate)}</div>
                `;
                total += subtotalBgn;
            });

            const totalAmountTd = document.getElementById('totalAmount');
            totalAmountTd.innerHTML = `
                <div>${formatCurrencyBGN(total)}</div>
                <div class="text-muted small">${formatCurrencyEUR(total * bgnToEurRate)}</div>
            `;

            document.getElementById('checkoutButton').disabled = !formValid;
        }

        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('input', () => {
                let val = input.value;
                if (/^0/.test(val)) input.value = val.replace(/^0+/, '');
                if (parseInt(val) > 500) input.value = val.substring(0, val.length - 1);
                validateAndUpdate();
            });
        });

        // Initialize tooltips only once on page load
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.quantity-input').forEach(input => {
                new bootstrap.Tooltip(input);
            });
            validateAndUpdate();
        });

        function deleteProduct(productId) {
            if (confirm('Remove this item from your cart?')) {
                const form = document.getElementById('deleteForm');
                document.getElementById('deleteProductId').value = productId;
                form.submit();
            }
        }
    </script>
}