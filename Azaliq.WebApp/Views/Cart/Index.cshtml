@model Azaliq.ViewModels.CartItems.CartIndexViewModel

@{
    ViewData["Title"] = "Shopping Cart";
    decimal BgnToEurRate = 0.51129m;
}

<style>
    :root {
        --primary-color: #198754;
        --danger-color: #dc3545;
        --warning-color: #ffc107;
        --bg-light: #f9fafb;
        --text-primary: #212529;
        --text-muted: #6c757d;
        --border-radius: 12px;
        --transition-speed: 0.3s;
        --shadow-elevation: rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: var(--bg-light);
        color: var(--text-primary);
    }

    h2 {
        text-align: center;
        font-weight: 700;
        margin-bottom: 2rem;
        letter-spacing: 1.3px;
        color: var(--primary-color);
    }

    .cart-container {
        max-width: 900px;
        margin: 0 auto 4rem;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: 0 10px 20px var(--shadow-elevation);
        overflow: hidden;
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 1.5rem;
    }

    .cart-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 0.75rem;
    }

        .cart-table thead th {
            text-align: left;
            font-weight: 600;
            color: var(--primary-color);
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--primary-color);
        }

        .cart-table tbody tr {
            background: #fff;
            box-shadow: 0 6px 10px var(--shadow-elevation);
            border-radius: var(--border-radius);
            transition: background-color var(--transition-speed);
            cursor: default;
        }

            .cart-table tbody tr:hover {
                background-color: #e9f7ef;
            }

        .cart-table td {
            padding: 1rem 1.25rem;
            vertical-align: middle;
        }

    .product-name {
        font-weight: 700;
        max-width: 220px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        cursor: default;
    }

    .product-image {
        width: 70px;
        height: 70px;
        border-radius: var(--border-radius);
        object-fit: cover;
        box-shadow: 0 3px 6px var(--shadow-elevation);
        transition: transform var(--transition-speed);
    }

        .product-image:hover {
            transform: scale(1.05);
        }

    input.quantity-input {
        width: 70px;
        padding: 6px 8px;
        font-weight: 600;
        border: 2px solid var(--primary-color);
        border-radius: 8px;
        transition: border-color var(--transition-speed);
    }

        input.quantity-input:focus {
            outline: none;
            border-color: var(--danger-color);
            box-shadow: 0 0 8px var(--danger-color);
        }

    .price-cell {
        font-weight: 600;
        color: var(--primary-color);
    }

    .subtotal-cell {
        font-weight: 700;
        color: var(--danger-color);
        font-size: 1.15rem;
    }

    button.btn-remove {
        background: transparent;
        border: none;
        color: var(--danger-color);
        font-size: 1.3rem;
        cursor: pointer;
        transition: color var(--transition-speed);
    }

        button.btn-remove:hover {
            color: #b22222;
        }

    .total-row td {
        border-top: 3px solid var(--primary-color);
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--primary-color);
        padding-top: 1rem;
    }

    .buttons-container {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        flex-wrap: wrap;
        margin-top: 2rem;
    }

    button.btn-checkout, button.btn-clear {
        border-radius: 50px;
        padding: 0.75rem 2.5rem;
        font-size: 1.1rem;
        font-weight: 700;
        letter-spacing: 0.06em;
        cursor: pointer;
        border: none;
        box-shadow: 0 6px 10px var(--shadow-elevation);
        transition: all var(--transition-speed);
    }

    button.btn-checkout {
        background: var(--primary-color);
        color: white;
    }

        button.btn-checkout:hover {
            background: #0f5132;
            box-shadow: 0 10px 20px rgba(15, 81, 50, 0.5);
            transform: translateY(-3px);
        }

    button.btn-clear {
        background: var(--warning-color);
        color: var(--text-primary);
        font-weight: 600;
    }

        button.btn-clear:hover {
            background: #e0a800;
            box-shadow: 0 10px 20px rgba(224, 168, 0, 0.5);
            transform: translateY(-3px);
        }

    .modal-content {
        border-radius: var(--border-radius);
        box-shadow: 0 10px 20px var(--shadow-elevation);
        padding: 1.5rem;
        font-size: 1.1rem;
    }

    .modal-header {
        border-bottom: none;
        padding-bottom: 0.5rem;
    }

    .modal-footer {
        border-top: none;
        padding-top: 0.5rem;
    }

    .modal-title {
        color: var(--danger-color);
        font-weight: 700;
        font-size: 1.3rem;
    }

    /* Responsive */
    @@media (max-width: 720px) {
        .cart-container

    {
        padding: 1rem;
    }

    .cart-table td, .cart-table th {
        padding: 0.5rem 0.75rem;
    }

    .buttons-container {
        flex-direction: column;
    }

    button.btn-checkout, button.btn-clear {
        width: 100%;
        padding: 1rem;
    }

    }
</style>

<h2>@ViewData["Title"]</h2>

@if (!Model.Items.Any())
{
    <div class="alert alert-info text-center py-5 fs-5">
        Your cart is empty.
    </div>
}
else
{
    <form asp-action="UpdateAndCheckout" asp-controller="Cart" method="post" id="cartForm">
        <div class="cart-container" role="table" aria-label="Shopping Cart Items">
            <table class="cart-table" role="grid">
                <thead>
                    <tr>
                        <th scope="col">Product</th>
                        <th scope="col">Image</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Unit Price</th>
                        <th scope="col">Subtotal</th>
                        <th scope="col" aria-label="Remove Item"></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        var priceBgn = Model.Items[i].Price;
                        var subtotalBgn = Model.Items[i].Subtotal;
                        var priceEur = priceBgn * BgnToEurRate;
                        var subtotalEur = subtotalBgn * BgnToEurRate;

                        <tr>
                            <td class="product-name" title="@Model.Items[i].ProductName">@Model.Items[i].ProductName</td>
                            <td>
                                <img src="@Model.Items[i].ProductImageUrl" alt="@Model.Items[i].ProductName" class="product-image" />
                            </td>
                            <td>
                                <input type="number"
                                       name="Items[@i].Quantity"
                                       value="@Model.Items[i].Quantity"
                                       min="1" max="500"
                                       class="quantity-input"
                                       data-index="@i"
                                       aria-label="Quantity for @Model.Items[i].ProductName" />
                                <input type="hidden" name="Items[@i].ProductId" value="@Model.Items[i].ProductId" />
                                <div class="text-danger small mt-1" id="error-@i" style="display:none;">
                                    Quantity must be between 1 and 500.
                                </div>
                            </td>
                            <td class="price-cell">
                                <div>@priceBgn.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))</div>
                                <div class="text-muted small">€@priceEur.ToString("F2")</div>
                            </td>
                            <td class="subtotal-cell" id="subtotal-@i">
                                <div>@subtotalBgn.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))</div>
                                <div class="text-muted small">€@subtotalEur.ToString("F2")</div>
                            </td>
                            <td>
                                <form asp-action="Delete" method="post" style="display:inline;">
                                    <input type="hidden" name="productId" value="@Model.Items[i].ProductId" />
                                    <button type="submit" class="btn-remove" aria-label="Remove @Model.Items[i].ProductName from cart" title="Remove from cart">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    @{
                        var totalBgn = Model.Total;
                        var totalEur = totalBgn * BgnToEurRate;
                    }
                    <tr class="total-row">
                        <td colspan="3"></td>
                        <td class="text-end" style="font-weight: 600; font-size: 1.15rem;">Total:</td>
                        <td colspan="2" class="subtotal-cell" id="totalAmount">
                            <div>@totalBgn.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("bg-BG"))</div>
                            <div class="text-muted small">€@totalEur.ToString("F2")</div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="buttons-container">
            <button type="submit" class="btn-checkout" id="checkoutButton">
                <i class="fas fa-check me-2"></i> Proceed to Checkout
            </button>

            <button type="button" class="btn-clear" data-bs-toggle="modal" data-bs-target="#confirmClearCartModal">
                <i class="fas fa-trash-alt me-2"></i> Clear Cart
            </button>
        </div>

        <!-- Clear Cart Confirmation Modal -->
        <div class="modal fade" id="confirmClearCartModal" tabindex="-1" aria-labelledby="clearCartLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="clearCartLabel">Confirm Clear Cart</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Are you absolutely sure you want to clear your shopping cart? This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                        <form asp-action="Clear" asp-controller="Cart" method="post" class="d-inline">
                            <button type="submit" class="btn btn-danger px-4 fw-semibold">Clear Cart</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </form>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const bgnToEurRate = 0.51129;

        function formatCurrencyBGN(value) {
            return new Intl.NumberFormat('bg-BG', { style: 'currency', currency: 'BGN' }).format(value);
        }
        function formatCurrencyEUR(value) {
            return '€' + value.toFixed(2);
        }

        function validateAndUpdate() {
            const inputs = document.querySelectorAll('.quantity-input');
            let total = 0;
            let formValid = true;

            inputs.forEach(input => {
                const index = input.dataset.index;
                const errorDiv = document.getElementById('error-' + index);
                const priceBgnText = input.closest('tr').querySelector('td:nth-child(4) div:first-child').textContent;
                const priceBgn = parseFloat(priceBgnText.replace(/[^\d.,-]/g, '').replace(',', '.'));
                let quantity = parseInt(input.value);

                if (isNaN(quantity) || quantity < 1 || quantity > 500) {
                    errorDiv.style.display = 'block';
                    formValid = false;
                } else {
                    errorDiv.style.display = 'none';
                }

                const subtotalBgn = (isNaN(quantity) || quantity < 1 || quantity > 500) ? 0 : quantity * priceBgn;
                const subtotalTd = document.getElementById('subtotal-' + index);
                subtotalTd.innerHTML = `
                    <div>${formatCurrencyBGN(subtotalBgn)}</div>
                    <div class="text-muted small">${formatCurrencyEUR(subtotalBgn * bgnToEurRate)}</div>
                `;
                total += subtotalBgn;
            });

            const totalAmountTd = document.getElementById('totalAmount');
            totalAmountTd.innerHTML = `
                <div>${formatCurrencyBGN(total)}</div>
                <div class="text-muted small">${formatCurrencyEUR(total * bgnToEurRate)}</div>
            `;

            document.getElementById('checkoutButton').disabled = !formValid;
        }

        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('input', () => {
                let val = input.value;

                if (/^0/.test(val)) {
                    input.value = val.replace(/^0+/, '');
                }

                if (parseInt(val) > 500) {
                    input.value = val.substring(0, val.length - 1);
                }

                validateAndUpdate();
            });
        });

        validateAndUpdate();
    </script>
}