@model IEnumerable<Azaliq.ViewModels.Product.ProductIndexViewModel>

@{
    ViewData["Title"] = "All Flowers";
    decimal bgnToEurRate = 0.51129m;
    string FormatBGN(decimal amt) => string.Format(System.Globalization.CultureInfo.GetCultureInfo("bg-BG"), "{0:C}", amt);
    string FormatEUR(decimal amt) => string.Format(System.Globalization.CultureInfo.GetCultureInfo("de-DE"), "€{0:N2}", amt);
}

<div class="d-flex justify-content-between align-items-center mb-3 mt-4">
    <h2>@ViewData["Title"]</h2>
    <form asp-action="Index" method="get" class="d-flex">
        <input type="text" name="searchTerm" value="@ViewBag.SearchTerm" class="form-control me-2" placeholder="Search flowers..." style="width: 300px;" />
        <button type="submit" class="btn btn-outline-primary">Search</button>
    </form>
</div>

<hr />

<div class="row row-cols-1 row-cols-md-3 g-4 text-center">
    @foreach (var product in Model)
    {
        var priceEUR = product.Price * bgnToEurRate;
        <div class="col">
            <div class="card h-100 shadow-sm">
                @if (!string.IsNullOrEmpty(product.ImageUrl))
                {
                    <img src="@product.ImageUrl" class="card-img-top" alt="Image of @product.Name" style="height: 250px; object-fit: cover;" />
                }
                else
                {
                    <img src="~/images/default-flower.jpg" class="card-img-top" alt="No image available" style="height: 250px; object-fit: cover;" />
                }

                <div class="card-body d-flex flex-column justify-content-between">
                    <h5 class="card-title">@product.Name</h5>
                    <p class="card-text text-muted">@product.Description</p>
                    <p class="fw-bold text-primary my-2">
                        @FormatBGN(product.Price)
                        <br />
                        <small class="text-secondary">@FormatEUR(priceEUR)</small>
                    </p>

                    @if (product.IsSameDayDeliveryAvailable)
                    {
                        <span class="badge bg-success mb-2">Same‑Day Delivery</span>
                    }

                    <div class="d-grid gap-1 mt-3">
                        <a asp-action="Details" asp-route-id="@product.Id" class="btn btn-outline-dark">View</a>

                        @if (User.IsInRole("User"))
                        {
                            <form asp-controller="Cart" asp-action="Add" method="post" class="d-flex justify-content-center align-items-center mt-2">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="productId" value="@product.Id" />
                                <input type="number"
                                       name="quantity"
                                       value="1"
                                       min="1" max="500"
                                       class="form-control me-1"
                                       style="width: 70px;"
                                       onkeydown="return eventAllowsNumberInput(event, this);" />
                                <button type="submit" class="btn btn-sm btn-success">Add to Cart</button>
                            </form>

                            <form method="post" asp-controller="Favorites" asp-action="Add" class="mt-1">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="productId" value="@product.Id" />
                                <button type="submit" class="btn btn-outline-danger btn-sm">
                                    <i class="fas fa-heart"></i> Favorite
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        function eventAllowsNumberInput(event, input) {
            const allowed = ["Backspace","Delete","Tab","ArrowLeft","ArrowRight","Home","End"];
            if (allowed.includes(event.key)) return true;
            if (!/\d/.test(event.key)) { event.preventDefault(); return false; }

            let cur = input.value;
            const selStart = input.selectionStart, selEnd = input.selectionEnd;
            const newVal = cur.substring(0, selStart) + event.key + cur.substring(selEnd);
            if (parseInt(newVal,10) > 500 || /^0/.test(newVal)) { event.preventDefault(); return false; }
            return true;
        }
    </script>
}